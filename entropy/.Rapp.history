1+1
load("/Users/charleywu/Github/ruggedness/entropy/walks.Rdata")
load("/Users/charleywu/Github/ruggedness/entropy/Walks/10k/walkCodes.Rdata")
getwd("")
setwd("/Users/charleywu/Github/ruggedness/entropy")
random walks#
rm(list=ls())#
ptm<-proc.time()#
setwd("..") #move to parent folder#
setwd("environments")#
#
steps <- 10#
stepsize <- 1 #try 10#
replications <- 100#
#
load("environments.Rdata")#
#
walkList <- list()#
#loop through environments#
for (i in 1:length(fitness)){#
    env <- fitness[[i]]#
    #output for each walk#
    walks <- matrix(nrow=steps,ncol=replications)#
    #loop through replications#
    for (rep in 1:replications){#
#
        #begin random walks#
        #sample starting location#
        startX <- sample(1:1001,1)#
        startY <- sample(1:1001,1)#
        #matrix storing fitness values for each step (x,y,fitness)#
        path <- matrix(nrow=steps,ncol=3)#
        path[1,] <- c(startX,startY,env[startX,startY])#
        for (step in 2:steps){#
            newX <- path[step-1,][1] + sample(0:stepsize,1)#
            newY <- path[step-1,][2] + sample(0:stepsize,1)#
                #check if beyond maximum bound#
            if (newX>1001){#
                newX <- newX - 1001#
            }#
            if (newY>1001){#
                newY <- newY - 1001#
            }#
            path[step,] <- c(newX,newY,env[newX,newY])#
        }#
        #add finess value to walks#
        walks[,rep] <- path[,3]#
    }#
    #add fitness values to walk#
    walkList[[i]] <- walks#
}#
#
setwd("..")#
setwd("entropy")#
setwd("walks")#
setwd("10")#
save(walkList, file="walks.Rdata")#
print(proc.time() - ptm)
random walks#
rm(list=ls())#
ptm<-proc.time()#
setwd("..") #move to parent folder#
setwd("environments")#
#
steps <- 100#
stepsize <- 1 #try 10#
replications <- 100#
#
load("environments.Rdata")#
#
walkList <- list()#
#loop through environments#
for (i in 1:length(fitness)){#
    env <- fitness[[i]]#
    #output for each walk#
    walks <- matrix(nrow=steps,ncol=replications)#
    #loop through replications#
    for (rep in 1:replications){#
#
        #begin random walks#
        #sample starting location#
        startX <- sample(1:1001,1)#
        startY <- sample(1:1001,1)#
        #matrix storing fitness values for each step (x,y,fitness)#
        path <- matrix(nrow=steps,ncol=3)#
        path[1,] <- c(startX,startY,env[startX,startY])#
        for (step in 2:steps){#
            newX <- path[step-1,][1] + sample(0:stepsize,1)#
            newY <- path[step-1,][2] + sample(0:stepsize,1)#
                #check if beyond maximum bound#
            if (newX>1001){#
                newX <- newX - 1001#
            }#
            if (newY>1001){#
                newY <- newY - 1001#
            }#
            path[step,] <- c(newX,newY,env[newX,newY])#
        }#
        #add finess value to walks#
        walks[,rep] <- path[,3]#
    }#
    #add fitness values to walk#
    walkList[[i]] <- walks#
}#
#
setwd("..")#
setwd("entropy")#
setwd("walks")#
setwd("100")#
save(walkList, file="walks.Rdata")#
print(proc.time() - ptm)
setwd("..")#
setwd("..")
random walks#
rm(list=ls())#
ptm<-proc.time()#
setwd("..") #move to parent folder#
setwd("environments")#
#
steps <- 100#
stepsize <- 1 #try 10#
replications <- 100#
#
load("environments.Rdata")#
#
walkList <- list()#
#loop through environments#
for (i in 1:length(fitness)){#
    env <- fitness[[i]]#
    #output for each walk#
    walks <- matrix(nrow=steps,ncol=replications)#
    #loop through replications#
    for (rep in 1:replications){#
#
        #begin random walks#
        #sample starting location#
        startX <- sample(1:1001,1)#
        startY <- sample(1:1001,1)#
        #matrix storing fitness values for each step (x,y,fitness)#
        path <- matrix(nrow=steps,ncol=3)#
        path[1,] <- c(startX,startY,env[startX,startY])#
        for (step in 2:steps){#
            newX <- path[step-1,][1] + sample(0:stepsize,1)#
            newY <- path[step-1,][2] + sample(0:stepsize,1)#
                #check if beyond maximum bound#
            if (newX>1001){#
                newX <- newX - 1001#
            }#
            if (newY>1001){#
                newY <- newY - 1001#
            }#
            path[step,] <- c(newX,newY,env[newX,newY])#
        }#
        #add finess value to walks#
        walks[,rep] <- path[,3]#
    }#
    #add fitness values to walk#
    walkList[[i]] <- walks#
}#
#
setwd("..")#
setwd("entropy")#
setwd("walks")#
setwd("100")#
save(walkList, file="walks.Rdata")#
print(proc.time() - ptm)#
setwd("..")#
setwd("..")
random walks#
rm(list=ls())#
ptm<-proc.time()#
setwd("..") #move to parent folder#
setwd("environments")#
#
steps <- 1000#
stepsize <- 1 #try 10#
replications <- 100#
#
load("environments.Rdata")#
#
walkList <- list()#
#loop through environments#
for (i in 1:length(fitness)){#
    env <- fitness[[i]]#
    #output for each walk#
    walks <- matrix(nrow=steps,ncol=replications)#
    #loop through replications#
    for (rep in 1:replications){#
#
        #begin random walks#
        #sample starting location#
        startX <- sample(1:1001,1)#
        startY <- sample(1:1001,1)#
        #matrix storing fitness values for each step (x,y,fitness)#
        path <- matrix(nrow=steps,ncol=3)#
        path[1,] <- c(startX,startY,env[startX,startY])#
        for (step in 2:steps){#
            newX <- path[step-1,][1] + sample(0:stepsize,1)#
            newY <- path[step-1,][2] + sample(0:stepsize,1)#
                #check if beyond maximum bound#
            if (newX>1001){#
                newX <- newX - 1001#
            }#
            if (newY>1001){#
                newY <- newY - 1001#
            }#
            path[step,] <- c(newX,newY,env[newX,newY])#
        }#
        #add finess value to walks#
        walks[,rep] <- path[,3]#
    }#
    #add fitness values to walk#
    walkList[[i]] <- walks#
}#
#
setwd("..")#
setwd("entropy")#
setwd("walks")#
setwd("1000")#
save(walkList, file="walks.Rdata")#
print(proc.time() - ptm)#
setwd("..")#
setwd("..")
steps <- 10000
random walks#
rm(list=ls())#
ptm<-proc.time()#
setwd("..") #move to parent folder#
setwd("environments")#
#
steps <- 10000#
stepsize <- 1 #try 10#
replications <- 100#
#
load("environments.Rdata")#
#
walkList <- list()#
#loop through environments#
for (i in 1:length(fitness)){#
    env <- fitness[[i]]#
    #output for each walk#
    walks <- matrix(nrow=steps,ncol=replications)#
    #loop through replications#
    for (rep in 1:replications){#
#
        #begin random walks#
        #sample starting location#
        startX <- sample(1:1001,1)#
        startY <- sample(1:1001,1)#
        #matrix storing fitness values for each step (x,y,fitness)#
        path <- matrix(nrow=steps,ncol=3)#
        path[1,] <- c(startX,startY,env[startX,startY])#
        for (step in 2:steps){#
            newX <- path[step-1,][1] + sample(0:stepsize,1)#
            newY <- path[step-1,][2] + sample(0:stepsize,1)#
                #check if beyond maximum bound#
            if (newX>1001){#
                newX <- newX - 1001#
            }#
            if (newY>1001){#
                newY <- newY - 1001#
            }#
            path[step,] <- c(newX,newY,env[newX,newY])#
        }#
        #add finess value to walks#
        walks[,rep] <- path[,3]#
    }#
    #add fitness values to walk#
    walkList[[i]] <- walks#
}#
#
setwd("..")#
setwd("entropy")#
setwd("walks")#
setwd("10000")#
save(walkList, file="walks.Rdata")#
print(proc.time() - ptm)#
setwd("..")#
setwd("..")
coding random walks#
rm(list=ls())#
ptm<-proc.time()#
setwd("walks")#
setwd("10") #walksize of walk to load#
load("walks.Rdata")#
#
#epsilon star values from fastEpsilon.R (1 step epsilon star)#
epsilon_star <- c(0.016756621, 0.003327951, 0.005683390, 0.032014352, 0.003956948, 0.034378054, 0.002517841, 0.009171281, 0.013481127, 0.013129699, 0.001362400, 0.001296913, 0.012938648, 0.001057927)#
#from 10 step random walks#
#epsilon_star <- c(0.14215015, 0.81185975, 0.55446881, 0.50626783, 0.03850807, 0.25362396,0.35231084, 0.28750825, 0.43181304, 0.16201408, 0.79754580, 0.67709166, 0.26071785, 0.43970627) #
#
#negative function because R is stupid (x less than negative y looks like assign value; x<-y)#
neg <- function(x) -x#
#
#function for coding each line of random walk (*-*)#
line_code <- function(delta_fitness, epsilon){#
    code <- NA#
    if (delta_fitness<neg(epsilon)){#
        code <- neg(1)#
    }else if (abs(delta_fitness)<=epsilon){#
        code<-0#
    }else if (delta_fitness>epsilon){#
        code<- 1#
    }#
    return(code)#
}#
#
#function for coding each pair of steps in random walk (*-*-*)#
sequence_code <- function(line1, line2){#
    sequence <- "NA NA"#
    if (line1==0){#
        if (line2==1){#
            sequence <- "0 1"#
        } else if (line2==neg(1)){#
            sequence<- "0 -1"#
        } else if (line2==0){#
            sequence <- "0 0"#
        }#
    } else if (line1==1){#
        if (line2==0){#
            sequence <- "1 0"#
        }else if (line2==neg(1)){#
            sequence <- "1 -1"#
        }else if (line2==1){#
            sequence <- "1 1"#
        }#
    } else if (line1==neg(1)){#
        if (line2==0){#
            sequence <- "-1 0"#
        } else if (line2==1){#
            sequence<- "-1 1"#
        }else if (line2==neg(1)){#
            sequence <- "-1 -1"#
        }#
    } #
    return(sequence)#
}#
#
walkCodes <- list()#
#loop through environments#
for (i in 1:length(walkList)){#
    walks <- walkList[[i]]#
    estar <- epsilon_star[i]#
    #loop through epsilon values#
    distributionList <- list() #distribution of sequences over all epsilon values (9 epsilon values: matrix(100 reps x 998 sequences))#
    epsilonVec <- c(0, estar/128, estar/64, estar/32, estar/16, estar/8, estar/4, estar/2, estar)#
    for (e in 1:9){#
        epsilon<- epsilonVec[e]#
        #loop through replications#
        codeMatrix <- matrix(0,nrow=ncol(walks), ncol=9) #9 different sequences x num replications#
        colnames(codeMatrix) <- c("0 1", "0 -1", "1 0", "1 -1", "-1 0", "-1 1", "1 1", "-1 -1", "0 0") #first 6 are rugged, 7-8 are smooth, and 9 is neutral#
        for (rep in 1:ncol(walks)){#
            #loop through sequences#
            for(step in 1:(nrow(walks)-2)){#
                step1 <- walks[step,rep]#
                step2 <- walks[step+1,rep]#
                step3 <- walks[step+2,rep]#
                #code lines#
                line1 <- line_code(step2-step1, epsilon)#
                line2 <- line_code(step3-step2, epsilon)#
                #code sequences#
                seq_code <- sequence_code(line1,line2)#
                #add sequence to codeMatrix#
                codeMatrix[rep,][seq_code] <- codeMatrix[rep,][seq_code] + 1#
            }#
        }#
        #aggregate over epsilon values#
        distributionList[[e]] <- codeMatrix#
    }#
    walkCodes[[i]] <- distributionList#
    print(i)#
}#
save(walkCodes, file="walkCodes.Rdata")#
print(proc.time() - ptm)#
setwd("..")#
setwd("..")
coding random walks#
rm(list=ls())#
ptm<-proc.time()#
setwd("walks")#
setwd("100") #walksize of walk to load#
load("walks.Rdata")#
#
#epsilon star values from fastEpsilon.R (1 step epsilon star)#
epsilon_star <- c(0.016756621, 0.003327951, 0.005683390, 0.032014352, 0.003956948, 0.034378054, 0.002517841, 0.009171281, 0.013481127, 0.013129699, 0.001362400, 0.001296913, 0.012938648, 0.001057927)#
#from 10 step random walks#
#epsilon_star <- c(0.14215015, 0.81185975, 0.55446881, 0.50626783, 0.03850807, 0.25362396,0.35231084, 0.28750825, 0.43181304, 0.16201408, 0.79754580, 0.67709166, 0.26071785, 0.43970627) #
#
#negative function because R is stupid (x less than negative y looks like assign value; x<-y)#
neg <- function(x) -x#
#
#function for coding each line of random walk (*-*)#
line_code <- function(delta_fitness, epsilon){#
    code <- NA#
    if (delta_fitness<neg(epsilon)){#
        code <- neg(1)#
    }else if (abs(delta_fitness)<=epsilon){#
        code<-0#
    }else if (delta_fitness>epsilon){#
        code<- 1#
    }#
    return(code)#
}#
#
#function for coding each pair of steps in random walk (*-*-*)#
sequence_code <- function(line1, line2){#
    sequence <- "NA NA"#
    if (line1==0){#
        if (line2==1){#
            sequence <- "0 1"#
        } else if (line2==neg(1)){#
            sequence<- "0 -1"#
        } else if (line2==0){#
            sequence <- "0 0"#
        }#
    } else if (line1==1){#
        if (line2==0){#
            sequence <- "1 0"#
        }else if (line2==neg(1)){#
            sequence <- "1 -1"#
        }else if (line2==1){#
            sequence <- "1 1"#
        }#
    } else if (line1==neg(1)){#
        if (line2==0){#
            sequence <- "-1 0"#
        } else if (line2==1){#
            sequence<- "-1 1"#
        }else if (line2==neg(1)){#
            sequence <- "-1 -1"#
        }#
    } #
    return(sequence)#
}#
#
walkCodes <- list()#
#loop through environments#
for (i in 1:length(walkList)){#
    walks <- walkList[[i]]#
    estar <- epsilon_star[i]#
    #loop through epsilon values#
    distributionList <- list() #distribution of sequences over all epsilon values (9 epsilon values: matrix(100 reps x 998 sequences))#
    epsilonVec <- c(0, estar/128, estar/64, estar/32, estar/16, estar/8, estar/4, estar/2, estar)#
    for (e in 1:9){#
        epsilon<- epsilonVec[e]#
        #loop through replications#
        codeMatrix <- matrix(0,nrow=ncol(walks), ncol=9) #9 different sequences x num replications#
        colnames(codeMatrix) <- c("0 1", "0 -1", "1 0", "1 -1", "-1 0", "-1 1", "1 1", "-1 -1", "0 0") #first 6 are rugged, 7-8 are smooth, and 9 is neutral#
        for (rep in 1:ncol(walks)){#
            #loop through sequences#
            for(step in 1:(nrow(walks)-2)){#
                step1 <- walks[step,rep]#
                step2 <- walks[step+1,rep]#
                step3 <- walks[step+2,rep]#
                #code lines#
                line1 <- line_code(step2-step1, epsilon)#
                line2 <- line_code(step3-step2, epsilon)#
                #code sequences#
                seq_code <- sequence_code(line1,line2)#
                #add sequence to codeMatrix#
                codeMatrix[rep,][seq_code] <- codeMatrix[rep,][seq_code] + 1#
            }#
        }#
        #aggregate over epsilon values#
        distributionList[[e]] <- codeMatrix#
    }#
    walkCodes[[i]] <- distributionList#
    print(i)#
}#
save(walkCodes, file="walkCodes.Rdata")#
print(proc.time() - ptm)#
setwd("..")#
setwd("..")
walkCodes[[1]]
walkCodes[[14]]
coding random walks#
rm(list=ls())#
ptm<-proc.time()#
setwd("walks")#
setwd("1000") #walksize of walk to load#
load("walks.Rdata")#
#
#epsilon star values from fastEpsilon.R (1 step epsilon star)#
epsilon_star <- c(0.016756621, 0.003327951, 0.005683390, 0.032014352, 0.003956948, 0.034378054, 0.002517841, 0.009171281, 0.013481127, 0.013129699, 0.001362400, 0.001296913, 0.012938648, 0.001057927)#
#from 10 step random walks#
#epsilon_star <- c(0.14215015, 0.81185975, 0.55446881, 0.50626783, 0.03850807, 0.25362396,0.35231084, 0.28750825, 0.43181304, 0.16201408, 0.79754580, 0.67709166, 0.26071785, 0.43970627) #
#
#negative function because R is stupid (x less than negative y looks like assign value; x<-y)#
neg <- function(x) -x#
#
#function for coding each line of random walk (*-*)#
line_code <- function(delta_fitness, epsilon){#
    code <- NA#
    if (delta_fitness<neg(epsilon)){#
        code <- neg(1)#
    }else if (abs(delta_fitness)<=epsilon){#
        code<-0#
    }else if (delta_fitness>epsilon){#
        code<- 1#
    }#
    return(code)#
}#
#
#function for coding each pair of steps in random walk (*-*-*)#
sequence_code <- function(line1, line2){#
    sequence <- "NA NA"#
    if (line1==0){#
        if (line2==1){#
            sequence <- "0 1"#
        } else if (line2==neg(1)){#
            sequence<- "0 -1"#
        } else if (line2==0){#
            sequence <- "0 0"#
        }#
    } else if (line1==1){#
        if (line2==0){#
            sequence <- "1 0"#
        }else if (line2==neg(1)){#
            sequence <- "1 -1"#
        }else if (line2==1){#
            sequence <- "1 1"#
        }#
    } else if (line1==neg(1)){#
        if (line2==0){#
            sequence <- "-1 0"#
        } else if (line2==1){#
            sequence<- "-1 1"#
        }else if (line2==neg(1)){#
            sequence <- "-1 -1"#
        }#
    } #
    return(sequence)#
}#
#
walkCodes <- list()#
#loop through environments#
for (i in 1:length(walkList)){#
    walks <- walkList[[i]]#
    estar <- epsilon_star[i]#
    #loop through epsilon values#
    distributionList <- list() #distribution of sequences over all epsilon values (9 epsilon values: matrix(100 reps x 998 sequences))#
    epsilonVec <- c(0, estar/128, estar/64, estar/32, estar/16, estar/8, estar/4, estar/2, estar)#
    for (e in 1:9){#
        epsilon<- epsilonVec[e]#
        #loop through replications#
        codeMatrix <- matrix(0,nrow=ncol(walks), ncol=9) #9 different sequences x num replications#
        colnames(codeMatrix) <- c("0 1", "0 -1", "1 0", "1 -1", "-1 0", "-1 1", "1 1", "-1 -1", "0 0") #first 6 are rugged, 7-8 are smooth, and 9 is neutral#
        for (rep in 1:ncol(walks)){#
            #loop through sequences#
            for(step in 1:(nrow(walks)-2)){#
                step1 <- walks[step,rep]#
                step2 <- walks[step+1,rep]#
                step3 <- walks[step+2,rep]#
                #code lines#
                line1 <- line_code(step2-step1, epsilon)#
                line2 <- line_code(step3-step2, epsilon)#
                #code sequences#
                seq_code <- sequence_code(line1,line2)#
                #add sequence to codeMatrix#
                codeMatrix[rep,][seq_code] <- codeMatrix[rep,][seq_code] + 1#
            }#
        }#
        #aggregate over epsilon values#
        distributionList[[e]] <- codeMatrix#
    }#
    walkCodes[[i]] <- distributionList#
    print(i)#
}#
save(walkCodes, file="walkCodes.Rdata")#
print(proc.time() - ptm)#
setwd("..")#
setwd("..")
417.475 /28
417.475 * 14.9
6220.378/60
coding random walks#
rm(list=ls())#
ptm<-proc.time()#
setwd("walks")#
setwd("10000") #walksize of walk to load#
load("walks.Rdata")#
#
#epsilon star values from fastEpsilon.R (1 step epsilon star)#
epsilon_star <- c(0.016756621, 0.003327951, 0.005683390, 0.032014352, 0.003956948, 0.034378054, 0.002517841, 0.009171281, 0.013481127, 0.013129699, 0.001362400, 0.001296913, 0.012938648, 0.001057927)#
#from 10 step random walks#
#epsilon_star <- c(0.14215015, 0.81185975, 0.55446881, 0.50626783, 0.03850807, 0.25362396,0.35231084, 0.28750825, 0.43181304, 0.16201408, 0.79754580, 0.67709166, 0.26071785, 0.43970627) #
#
#negative function because R is stupid (x less than negative y looks like assign value; x<-y)#
neg <- function(x) -x#
#
#function for coding each line of random walk (*-*)#
line_code <- function(delta_fitness, epsilon){#
    code <- NA#
    if (delta_fitness<neg(epsilon)){#
        code <- neg(1)#
    }else if (abs(delta_fitness)<=epsilon){#
        code<-0#
    }else if (delta_fitness>epsilon){#
        code<- 1#
    }#
    return(code)#
}#
#
#function for coding each pair of steps in random walk (*-*-*)#
sequence_code <- function(line1, line2){#
    sequence <- "NA NA"#
    if (line1==0){#
        if (line2==1){#
            sequence <- "0 1"#
        } else if (line2==neg(1)){#
            sequence<- "0 -1"#
        } else if (line2==0){#
            sequence <- "0 0"#
        }#
    } else if (line1==1){#
        if (line2==0){#
            sequence <- "1 0"#
        }else if (line2==neg(1)){#
            sequence <- "1 -1"#
        }else if (line2==1){#
            sequence <- "1 1"#
        }#
    } else if (line1==neg(1)){#
        if (line2==0){#
            sequence <- "-1 0"#
        } else if (line2==1){#
            sequence<- "-1 1"#
        }else if (line2==neg(1)){#
            sequence <- "-1 -1"#
        }#
    } #
    return(sequence)#
}#
#
walkCodes <- list()#
#loop through environments#
for (i in 1:length(walkList)){#
    walks <- walkList[[i]]#
    estar <- epsilon_star[i]#
    #loop through epsilon values#
    distributionList <- list() #distribution of sequences over all epsilon values (9 epsilon values: matrix(100 reps x 998 sequences))#
    epsilonVec <- c(0, estar/128, estar/64, estar/32, estar/16, estar/8, estar/4, estar/2, estar)#
    for (e in 1:9){#
        epsilon<- epsilonVec[e]#
        #loop through replications#
        codeMatrix <- matrix(0,nrow=ncol(walks), ncol=9) #9 different sequences x num replications#
        colnames(codeMatrix) <- c("0 1", "0 -1", "1 0", "1 -1", "-1 0", "-1 1", "1 1", "-1 -1", "0 0") #first 6 are rugged, 7-8 are smooth, and 9 is neutral#
        for (rep in 1:ncol(walks)){#
            #loop through sequences#
            for(step in 1:(nrow(walks)-2)){#
                step1 <- walks[step,rep]#
                step2 <- walks[step+1,rep]#
                step3 <- walks[step+2,rep]#
                #code lines#
                line1 <- line_code(step2-step1, epsilon)#
                line2 <- line_code(step3-step2, epsilon)#
                #code sequences#
                seq_code <- sequence_code(line1,line2)#
                #add sequence to codeMatrix#
                codeMatrix[rep,][seq_code] <- codeMatrix[rep,][seq_code] + 1#
            }#
        }#
        #aggregate over epsilon values#
        distributionList[[e]] <- codeMatrix#
    }#
    walkCodes[[i]] <- distributionList#
    print(i)#
}#
save(walkCodes, file="walkCodes.Rdata")#
print(proc.time() - ptm)#
setwd("..")#
setwd("..")
7894.644 /60
walkCodes[[1]]
